from typing import Dict, List, Optional, Tuple

import pandas as pd


def preprocess(data: Dict, prep_params: Dict) -> Tuple[pd.DataFrame, pd.Series]:
    # Build x and y.
    x = build_x(data, prep_params)
    y = build_y(data["targets"], prep_params["horizon"])

    # Align x indexes with y indexes.
    x = pd.merge(y, x, left_index=True, right_index=True, how="left")
    x = x.iloc[:, 1:]

    # Drop missing values generated by lags/horizon.
    idx = ~(x.isnull().any(axis=1) | y.isnull())
    x = x.loc[idx]
    y = y.loc[idx]

    return x, y


def build_y(target_data: Dict, horizon: int) -> pd.DataFrame:
    y = {}
    for name, df in target_data.items():
        y[name] = df["value"].shift(-horizon).rename(f"horizon_{horizon}")
    return pd.concat(y.values())


def build_x(data: Dict, prep_params: Dict) -> pd.DataFrame:
    target_data = data["targets"]
    feature_data = data["features"]
    target_lags = prep_params["target_lags"]
    feature_lags = prep_params["feature_lags"]

    # Build x_target and x_features.
    x_targ = _build_x_lags_targets(target_data, target_lags)
    x_feat = _build_x_lags_features(feature_data, target_data, feature_lags)

    # Combine x_target and x_features.
    if x_feat is None and x_targ is None:
        raise ValueError("Cannot have no target lags and no feature lags.")
    elif x_feat is None:
        return x_targ
    elif x_targ is None:
        return x_feat

    return pd.merge(
        x_targ, x_feat, left_index=True, right_index=True, how="left"
    )


def build_x_latest(data: Dict, prep_params: Dict) -> pd.DataFrame:
    """Return only latest values of x, useful for inference"""
    x = build_x(data, prep_params)
    return x[x.index == x.index.max()]


def _build_x_lags(
    data: Dict,
    lags: List[int],
    prefix: Optional[str] = None,
    concat_axis=1,
) -> Optional[pd.DataFrame]:
    if not lags:
        return None
    x = {}
    _prefix = prefix
    for name, df in data.items():
        x[name] = _build_lags(
            df=df,
            column="value",
            lags=lags,
            prefix=name if prefix is None else prefix,
        )

    return pd.concat(x.values(), axis=concat_axis)


def _build_x_lags_targets(
    target_data: Dict, lags: List[int]
) -> Optional[pd.DataFrame]:
    if not lags:
        return None
    x = []
    for name, df in target_data.items():
        x.append(
            _build_lags(
                df=df,
                column="value",
                lags=lags,
                prefix="target",
            )
        )
    return pd.concat(x, axis=1)


def _build_x_lags_features(
    feature_data: Dict, target_data: Dict, lags: List[int]
) -> Optional[pd.DataFrame]:
    if not lags:
        return None
    x = []
    for name, df in feature_data.items():
        x.append(
            _build_lags(
                df=df,
                column="value",
                lags=lags,
                prefix=name,
            )
        )
    # Concat features on axis 1.
    x = pd.concat(
        [df.reset_index().drop(columns=["ts_name"]) for df in x], axis=1
    )
    # Use target to "reindex" on axis 0.
    for_reindex = pd.concat(target_data.values(), axis=1).reset_index()
    x = pd.merge(for_reindex, x, how="left", on="time")
    return x.drop(columns=["value"]).set_index(["time", "ts_name"])


def _build_lags(
    df: pd.DataFrame, column: str, lags: List[int], prefix: str
) -> pd.DataFrame:
    return pd.concat(
        [
            df[[column]]
            .shift(lag)
            .rename(columns={column: f"{prefix}_lag_{lag}"})
            for lag in lags
        ],
        axis=1,
    )
